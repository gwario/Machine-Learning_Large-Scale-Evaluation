% %-*- text -*-
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is a PROMISE Software Engineering Repository data set made publicly
% available in order to encourage repeatable, verifiable, refutable, and/or
% improvable predictive models of software engineering.
% 
% If you publish material based on PROMISE data sets then, please
% follow the acknowledgment guidelines posted on the PROMISE repository
% web page http://promise.site.uottawa.ca/SERepository .
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 1. Title/Topic: KC2/software defect prediction
% 2. Sources:
% 
%    -- Creators:  NASA, then the NASA Metrics Data Program,
%       -- http://mdp.ivv.nasa.gov. Contacts: Mike Chapman,
%          Galaxy Global Corporation (Robert.Chapman@ivv.nasa.gov)
%          +1-304-367-8341; Pat Callis, NASA, NASA project manager
%          for MDP (Patrick.E.Callis@ivv.nasa.gov) +1-304-367-8309
% 
%    -- Donor: Tim Menzies (tim@barmag.net)
% 
%    -- Date:  December 2 2004
% 3. Past usage:
% 
%    1. How Good is Your Blind  Spot Sampling Policy?; 2003; Tim Menzies
%       and Justin S. Di Stefano; 2004 IEEE Conference on High Assurance
%       Software Engineering (http://menzies.us/pdf/03blind.pdf).
% 
%       -- Results:
% 
%         -- Very simple learners (ROCKY) perform as well in this domain
%         as more sophisticated methods (e.g. J48, model trees, model
%         trees) for predicting detects
% 
%         -- Many learners have very low false alarm rates.
% 
% 	  -- Probability of detection (PD) rises with effort and rarely
% 	  rises above it.
% 
%         -- High PDs are associated with high PFs (probability of
%         failure)
% 
%         -- PD, PF, effort can change significantly while accuracy
%         remains essentially stable
% 
%         -- With two notable exceptions, detectors learned from one
%         data set (e.g. KC2) have nearly they same properties when
%         applied to another (e.g. PC2, KC2). Exceptions:
%            -- LinesOfCode measures generate wider inter-data-set variances;
%            -- Precision's inter-data-set variances vary wildly
% 
%    2. "Assessing Predictors of Software Defects", T. Menzies and
%       J. DiStefano and A. Orrego and R. Chapman, 2004,
%       Proceedings, workshop on Predictive Software Models, Chicago,
%       Available from http://menzies.us/pdf/04psm.pdf.
%       -- Results:
% 
%          -- From KC2, Naive Bayes generated PDs of 50% with PF of 10%
% 
%          -- Naive Bayes out-performs J48 for defect detection
% 
%          -- When learning on more and more data, little improvement is
%             seen after processing 300 examples.
% 
%          -- PDs are much higher from data collected below the sub-sub-
%             system level.
% 
%          -- Accuracy is a surprisingly uninformative measure of success
%             for a defect detector. Two detectors with the same accuracy
%             can have widely varying PDs and PFs.
% 4. Relevant information:
% 
%    -- Data from C++ functions. Science data processing; another part
%    of the same project as KC1; different personnel than KC1.  Shared
%    some third-party software libraries with KC1, but no other software
%    overlap.
% 
%    -- Data comes from McCabe and Halstead features extractors of
%    source code.  These features were defined in the 70s in an attempt
%    to objectively characterize code features that are associated with
%    software quality.  The nature of association is under dispute.
%    Notes on McCabe and Halstead follow.
% 
%    -- The McCabe and Halstead measures are "module"-based where a
%    "module" is the smallest unit of functionality. In C or Smalltalk,
%    "modules" would be called "function" or "method" respectively.
% 
%    -- Defect detectors can be assessed according to the following measures:
% 
%                                                module actually has defects
%                                               +-------------+------------+
%                                               |     no      |     yes    |
%                                         +-----+-------------+------------+
%          classifier predicts no defects |  no |      a      |      b     |
%                                         +-----+-------------+------------+
%        classifier predicts some defects | yes |      c      |      d     |
%                                         +-----+-------------+------------+
% 
%        accuracy                   = acc          = (a+d)/(a+b+c+d
%        probability of detection   = pd  = recall = d/(b+d)
%        probability of false alarm = pf           = c/(a+c)
%        precision                  = prec         = d/(c+d)
%        effort                     = amount of code selected by detector
%                                   = (c.LOC + d.LOC)/(Total LOC)
% 
%        Ideally, detectors have high PDs, low PFs, and low
%        effort. This ideal state rarely happens:
% 
%        -- PD and effort are linked. The more modules that trigger
%        the detector, the higher the PD. However, effort also gets
%        increases
% 
%        -- High PD or low PF comes at the cost of high PF or low PD
%        (respectively). This linkage can be seen in a standard
%        receiver operator curve (ROC).  Suppose, for example, LOC> x
%        is used as the detector (i.e. we assume large modules have
%        more errors). LOC > x represents a family of detectors. At
%        x=0, EVERY module is predicted to have errors. This detector
%        has a high PD but also a high false alarm rate. At x=0, NO
%        module is predicted to have errors. This detector has a low
%        false alarm rate but won't detect anything at all. At 0<x<1,
%        a set of detectors are generated as shown below:
% 
%                 pd
%               1 |           x  x  x                KEY:
%                 |        x     .                   "."  denotes the line PD=PF
%                 |     x      .                     "x"  denotes the roc curve
%                 |   x      .                            for a set of detectors
%                 |  x     .
%                 | x    .
%                 | x  .
%                 |x .
%                 |x
%                 x------------------ pf
%                0                   1
% 
%         Note that:
% 
%         -- The only way to make no mistakes (PF=0) is to do nothing
%        (PD=0)
% 
%         -- The only way to catch more detects is to make more
%         mistakes (increasing PD means increasing PF).
% 
%         -- Our detector bends towards the "sweet spot" of
%         <PD=1,PF=0> but does not reach it.
% 
%         -- The line pf=pd on the above graph represents the "no information"
%         line. If pf=pd then the detector is pretty useless. The better
%         the detector, the more it rises above PF=PD towards the "sweet spot".
% 
%    NOTES ON MCCABE/HALSTEAD
%    ========================
%    McCabe argued that code with complicated pathways are more
%    error-prone.  His metrics therefore reflect the pathways within a
%    code module.
%       @Article{mccabe76,
%   		title 	= "A Complexity Measure",
%   		author 	= "T.J. McCabe",
%   		pages 	= "308--320",
%   		journal = "IEEE Transactions on Software Engineering",
%   		year 	= "1976",
%   		volume 	= "2",
%   		month 	= "December",
%   		number 	= "4"}
% 
%    Halstead argued that code that is hard to read is more likely to be
%    fault prone. Halstead estimates reading complexity by counting the
%    number of concepts in a module; e.g. number of unique operators.
%       @Book{halstead77,
%   		Author 	  = "M.H. Halstead",
%   		Title 	  = "Elements of Software Science",
%   		Publisher = "Elsevier ",
%   		Year 	  = 1977}
% 
%    We study these static code measures since they are useful, easy to
%    use, and widely used:
% 
%     -- USEFUL: E.g. this data set can generate highly accurate
%     predictors for defects
% 
%     -- EASY TO USE: Static code measures (e.g. lines of code, the
%     McCabe/Halstead measures) can be automatically and cheaply
%     collected.
% 
%     -- WIDELY USED: Many researchers use static measures to guide
%     software quality predictions (see the reference list in the above
%     "blind spot" paper. Verification and validation (V\&V) textbooks
%     advise using static code complexity measures to decide which
%     modules are worthy of manual inspections.  Further, we know of
%     several large government software contractors that won't review
%     software modules _unless_ tools like McCabe predict that they are
%     fault prone.  Hence, defect detectors have a major economic impact
%     when they may force programmers to rewrite code.
% 
%     Nevertheless, the merits of these metrics has been widely
%     criticized.  Static code measures are hardly a complete
%     characterization of the internals of a function. Fenton offers an
%     insightful example where the same functionality is achieved using
%     different programming language constructs resulting in different
%     static measurements for that module. Fenton uses this example to
%     argue the uselessness of static code measures.
%          @book{fenton97,
%            author    = "N.E. Fenton and S.L. Pfleeger",
%            title     = {Software metrics: a Rigorous \& Practical Approach},
%            publisher = {International Thompson Press},
%            year      = {1997}}
% 
%     An alternative interpretation of Fenton's example is that static
%     measures can never be a definite and certain indicator of the
%     presence of a fault.  Rather, defect detectors based on static
%     measures are best viewed as probabilistic statements that the
%     frequency of faults tends to increase in code modules that trigger
%     the detector.  By definition, such probabilistic statements will
%     are not categorical claims with some a non-zero false alarm
%     rate. The research challenge for data miners is to ensure that
%     these false alarms do not cripple their learned theories.
% 
%     The McCabe metrics are a collection of four software metrics:
%     essential complexity, cyclomatic complexity, design complexity and
%     LOC, Lines of Code.
% 
%     -- Cyclomatic Complexity, or "v(G)", measures the number of
%     "linearly independent paths". A set of paths is said to be
%     linearly independent if no path in the set is a linear combination
%     of any other paths in the set through a program's "flowgraph". A
%     flowgraph is a directed graph where each node corresponds to a
%     program statement, and each arc indicates the flow of control from
%     one statement to another. "v(G)" is calculated by "v(G) = e - n + 2"
%     where "G" is a program's flowgraph, "e" is the number of arcs in
%     the flowgraph, and "n" is the number of nodes in the
%     flowgraph. The standard McCabes rules ("v(G)">10), are used to
%     identify fault-prone module.
% 
%     -- Essential Complexity, or "ev(G)$" is the extent to which a
%     flowgraph can be "reduced" by decomposing all the subflowgraphs
%     of $G$ that are "D-structured primes". Such "D-structured
%     primes" are also sometimes referred to as "proper one-entry
%     one-exit subflowgraphs" (for a more thorough discussion of
%     D-primes, see the Fenton text referenced above). "ev(G)" is
%     calculated using "ev(G)= v(G) - m" where $m$ is the number of
%     subflowgraphs of "G" that are D-structured primes.
% 
%     -- Design Complexity, or "iv(G)", is the cyclomatic complexity of a
%     module's reduced flowgraph.  The flowgraph, "G", of a module is
%     reduced to eliminate any complexity which does not influence the
%     interrelationship between design modules.  According to McCabe,
%     this complexity measurement reflects the modules calling patterns
%     to its immediate subordinate modules.
% 
%     -- Lines of code is measured according to McCabe's line counting
%     conventions.
% 
%     The Halstead falls into three groups: the base measures, the
%     derived measures, and lines of code measures.
% 
%     -- Base measures:
%        -- mu1             = number of unique operators
%        -- mu2             = number of unique operands
%        -- N1              = total occurrences of operators
%        -- N2              = total occurrences of operands
%        -- length     = N  = N1 + N2
%        -- vocabulary = mu = mu1 + mu2
%        -- Constants set for each function:
%           -- mu1' =  2 = potential operator count (just the function
%                          name and the "return" operator)
%           -- mu2'      = potential operand count. (the number
%                          of arguments to the module)
% 
%        For example, the expression "return max(w+x,x+y)" has "N1=4"
%        operators "return, max, +,+)", "N2=4" operands (w,x,x,y),
%        "mu1=3" unique operators (return, max,+), and "mu2=3" unique
%        operands (w,x,y).
% 
%      -- Derived measures:
%         -- P = volume = V = N * log2(mu) (the number of mental
%                                           comparisons needed to write
%                                           a program of length N)
%         -- V* = volume on minimal implementation
%               = (2 + mu2')*log2(2 + mu2')
%         -- L  = program length = V*/N
%         -- D  = difficulty = 1/L
%         -- L' = 1/D
%         -- I  = intelligence = L'*V'
%         -- E  = effort to write program = V/L
%         -- T  = time to write program = E/18 seconds
% 5. Number of instances: 522
% 6. Number of attributes: 22 (5 different lines of code measure,
%          3 McCabe metrics, 4 base Halstead measures, 8 derived
%           Halstead measures, a branch-count, and 1 goal field)
% 7. Attribute Information:
% 
% 	
%      1. loc             : numeric % McCabe's line count of code
%      2. v(g)            : numeric % McCabe "cyclomatic complexity"
%      3. ev(g)           : numeric % McCabe "essential complexity"
%      4. iv(g)           : numeric % McCabe "design complexity"
%      5. n               : numeric % Halstead total operators + operands
%      6. v               : numeric % Halstead "volume"
%      7. l               : numeric % Halstead "program length"
%      8. d               : numeric % Halstead "difficulty"
%      9. i               : numeric % Halstead "intelligence"
%     10. e               : numeric % Halstead "effort"
%     11. b               : numeric % Halstead
%     12. t               : numeric % Halstead's time estimator
%     13. lOCode          : numeric % Halstead's line count
%     14. lOComment       : numeric % Halstead's count of lines of comments
%     15. lOBlank         : numeric % Halstead's count of blank lines
%     16. lOCodeAndComment: numeric
%     17. uniq_Op         : numeric % unique operators
%     18. uniq_Opnd       : numeric % unique operands
%     19. total_Op        : numeric % total operators
%     20. total_Opnd      : numeric % total operands
%     21: branchCount     : numeric % of the flow graph
%     22. problems        : {no,yes}% module has/has not one or more
%                                   % reported defects
% 8. Missing attributes: none
% 9. Class Distribution: the class value (problems) is discrete
%    yes: 105 = 20.5%
%    no:  415 = 79.5%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@RELATION KC2

@ATTRIBUTE loc NUMERIC
@ATTRIBUTE v(g) NUMERIC
@ATTRIBUTE ev(g) NUMERIC
@ATTRIBUTE iv(g) NUMERIC
@ATTRIBUTE n NUMERIC
@ATTRIBUTE v NUMERIC
@ATTRIBUTE l NUMERIC
@ATTRIBUTE d NUMERIC
@ATTRIBUTE i NUMERIC
@ATTRIBUTE e NUMERIC
@ATTRIBUTE b NUMERIC
@ATTRIBUTE t NUMERIC
@ATTRIBUTE lOCode NUMERIC
@ATTRIBUTE lOComment NUMERIC
@ATTRIBUTE lOBlank NUMERIC
@ATTRIBUTE lOCodeAndComment NUMERIC
@ATTRIBUTE uniq_Op NUMERIC
@ATTRIBUTE uniq_Opnd NUMERIC
@ATTRIBUTE total_Op NUMERIC
@ATTRIBUTE total_Opnd NUMERIC
@ATTRIBUTE branchCount NUMERIC
@ATTRIBUTE problems {no, yes}

@DATA
6.0,1.0,1.0,1.0,15.0,49.83,0.43,2.33,21.36,116.27,0.02,6.46,4.0,0.0,0.0,0.0,4.0,6.0,8.0,7.0,1.0,no
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
43.0,3.0,1.0,3.0,83.0,380.55,0.12,8.25,46.13,3139.55,0.13,174.42,24.0,4.0,8.0,0.0,8.0,16.0,50.0,33.0,5.0,yes
275.0,24.0,18.0,21.0,572.0,3731.48,0.02,41.95,88.94,156552.44,1.24,8697.36,195.0,38.0,39.0,1.0,26.0,66.0,359.0,213.0,47.0,yes
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
4.0,1.0,1.0,1.0,9.0,25.27,0.33,3.0,8.42,75.8,0.01,4.21,2.0,0.0,0.0,0.0,6.0,1.0,8.0,1.0,1.0,no
15.0,2.0,1.0,1.0,19.0,74.23,0.33,3.0,24.74,222.69,0.02,12.37,4.0,0.0,0.0,0.0,8.0,18.0,24.0,22.0,3.0,no
10.0,2.0,1.0,2.0,18.0,64.53,0.14,7.0,9.22,451.71,0.02,25.09,8.0,0.0,0.0,0.0,8.0,4.0,11.0,7.0,3.0,no
38.0,3.0,1.0,3.0,134.0,722.57,0.06,16.11,44.85,11641.41,0.24,646.75,32.0,1.0,2.0,0.0,15.0,27.0,76.0,58.0,5.0,yes
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
82.0,10.0,1.0,10.0,220.0,1178.66,0.07,15.03,78.4,17719.21,0.39,984.4,73.0,0.0,7.0,0.0,11.0,30.0,138.0,82.0,19.0,no
13.0,2.0,1.0,1.0,31.0,131.69,0.21,4.73,27.86,622.51,0.04,34.58,10.0,0.0,1.0,0.0,8.0,11.0,18.0,13.0,3.0,yes
13.0,2.0,1.0,2.0,33.0,134.89,0.1,10.0,13.49,1348.86,0.04,74.94,7.0,1.0,1.0,2.0,10.0,7.0,19.0,14.0,3.0,no
5.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,1.0,0.0,3.0,2.0,3.0,2.0,1.0,no
4.0,1.0,1.0,1.0,7.0,11.09,0.67,1.5,7.4,16.64,0.0,0.92,3.0,0.0,0.0,0.0,2.0,4.0,2.0,8.0,1.0,no
52.0,7.0,1.0,4.0,133.0,692.86,0.08,12.48,55.52,8646.86,0.23,480.38,33.0,6.0,9.0,0.0,12.0,25.0,81.0,52.0,13.0,no
55.0,10.0,1.0,6.0,122.0,657.86,0.05,19.41,33.89,12771.12,0.22,709.51,37.0,2.0,10.0,4.0,19.0,23.0,75.0,47.0,19.0,no
11.0,2.0,1.0,2.0,19.0,68.11,0.14,7.0,9.73,476.8,0.02,26.49,8.0,0.0,1.0,0.0,8.0,4.0,12.0,7.0,3.0,no
76.0,10.0,4.0,7.0,184.0,1016.34,0.03,29.4,34.57,29880.26,0.34,1660.01,60.0,3.0,9.0,0.0,21.0,25.0,114.0,70.0,19.0,no
9.0,1.0,1.0,1.0,13.0,41.21,0.25,4.0,10.3,164.84,0.01,9.16,3.0,2.0,2.0,0.0,6.0,3.0,9.0,4.0,1.0,no
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
4.0,1.0,1.0,1.0,6.0,15.51,0.4,2.5,6.2,38.77,0.01,2.15,2.0,0.0,0.0,0.0,5.0,1.0,5.0,1.0,1.0,no
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
21.0,2.0,1.0,2.0,34.0,141.78,0.15,6.87,20.62,974.72,0.05,54.15,16.0,1.0,1.0,0.0,10.0,8.0,23.0,11.0,3.0,no
29.0,6.0,4.0,4.0,67.0,311.14,0.08,12.46,24.97,3877.26,0.1,215.4,25.0,0.0,2.0,0.0,12.0,13.0,40.0,27.0,11.0,no
110.0,12.0,10.0,12.0,313.0,1825.69,0.04,24.0,76.07,43816.67,0.61,2434.26,88.0,3.0,15.0,0.0,16.0,41.0,190.0,123.0,23.0,yes
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
49.0,4.0,1.0,2.0,77.0,394.95,0.07,14.63,27.01,5776.21,0.13,320.9,19.0,18.0,7.0,0.0,15.0,20.0,38.0,39.0,7.0,no
10.0,2.0,1.0,2.0,18.0,64.53,0.14,7.0,9.22,451.71,0.02,25.09,8.0,0.0,0.0,0.0,8.0,4.0,11.0,7.0,3.0,no
15.0,1.0,1.0,1.0,55.0,224.81,0.17,5.73,39.25,1287.55,0.07,71.53,12.0,0.0,1.0,0.0,6.0,11.0,34.0,21.0,1.0,no
5.0,1.0,1.0,1.0,8.0,24.0,0.33,3.0,8.0,72.0,0.01,4.0,2.0,0.0,0.0,0.0,6.0,2.0,6.0,2.0,1.0,no
30.0,5.0,3.0,4.0,86.0,421.99,0.08,12.67,33.32,5345.24,0.14,296.96,20.0,3.0,5.0,0.0,12.0,18.0,48.0,38.0,9.0,no
33.0,2.0,1.0,2.0,53.0,249.12,0.14,7.33,33.97,1826.9,0.08,101.49,23.0,0.0,5.0,0.0,11.0,15.0,33.0,20.0,3.0,no
39.0,7.0,1.0,4.0,89.0,418.34,0.08,13.29,31.49,5557.93,0.14,308.77,34.0,0.0,3.0,0.0,12.0,14.0,58.0,31.0,13.0,no
138.0,20.0,18.0,15.0,444.0,2622.66,0.03,30.73,85.35,80587.17,0.87,4477.07,128.0,0.0,8.0,0.0,16.0,44.0,275.0,169.0,39.0,yes
88.0,10.0,6.0,6.0,198.0,1123.14,0.06,17.83,63.0,20023.99,0.37,1112.44,66.0,7.0,11.0,0.0,16.0,35.0,120.0,78.0,19.0,yes
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
47.0,5.0,4.0,4.0,59.0,273.99,0.07,13.36,20.5,3661.47,0.09,203.41,19.0,3.0,5.0,0.0,16.0,23.0,69.0,49.0,5.0,yes
10.0,2.0,1.0,2.0,22.0,83.76,0.17,6.0,13.96,502.57,0.03,27.92,8.0,0.0,0.0,0.0,8.0,6.0,13.0,9.0,3.0,no
7.0,1.0,1.0,1.0,29.0,67.34,0.12,8.25,8.16,555.52,0.02,30.86,5.0,0.0,0.0,0.0,2.0,10.0,8.0,11.0,1.0,no
32.0,6.0,1.0,6.0,87.0,446.25,0.06,16.94,26.34,7559.96,0.15,420.0,27.0,1.0,2.0,0.0,18.0,17.0,55.0,32.0,11.0,no
57.0,4.0,1.0,3.0,136.0,742.48,0.06,17.63,42.12,13089.7,0.25,727.21,43.0,0.0,12.0,0.0,17.0,27.0,80.0,56.0,7.0,yes
71.0,11.0,1.0,6.0,171.0,897.4,0.04,24.36,36.83,21863.82,0.3,1214.66,58.0,0.0,11.0,0.0,16.0,22.0,104.0,67.0,21.0,no
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
10.0,2.0,1.0,2.0,18.0,64.53,0.14,7.0,9.22,451.71,0.02,25.09,8.0,0.0,0.0,0.0,8.0,4.0,11.0,7.0,3.0,no
29.0,3.0,1.0,3.0,72.0,334.36,0.09,10.61,31.52,3546.58,0.11,197.03,22.0,1.0,3.0,0.0,11.0,14.0,45.0,27.0,5.0,no
102.0,10.0,8.0,9.0,244.0,1452.82,0.04,24.75,58.7,35957.39,0.48,1997.63,72.0,12.0,16.0,0.0,22.0,40.0,154.0,90.0,19.0,yes
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
118.0,3.0,1.0,2.0,353.0,2050.0,0.03,31.2,65.71,63959.88,0.68,3553.33,87.0,1.0,23.0,0.0,16.0,40.0,197.0,156.0,5.0,yes
4.0,1.0,1.0,1.0,6.0,15.51,0.5,2.0,7.75,31.02,0.01,1.72,2.0,0.0,0.0,0.0,4.0,2.0,4.0,2.0,1.0,no
4.0,1.0,1.0,1.0,19.0,68.11,0.91,1.1,61.92,74.93,0.02,4.16,4.0,0.0,0.0,0.0,1.0,2.0,1.0,3.0,1.0,no
4.0,1.0,1.0,1.0,9.0,25.27,0.0,0.0,0.0,0.0,0.01,0.0,2.0,0.0,0.0,0.0,7.0,0.0,9.0,0.0,1.0,no
61.0,4.0,1.0,3.0,159.0,873.2,0.06,16.5,52.92,14407.88,0.29,800.44,49.0,0.0,10.0,0.0,15.0,30.0,93.0,66.0,7.0,yes
63.0,8.0,7.0,7.0,194.0,1121.58,0.05,19.22,58.37,21552.6,0.37,1197.37,49.0,2.0,10.0,0.0,18.0,37.0,115.0,79.0,15.0,yes
4.0,1.0,1.0,1.0,2.0,2.0,2.0,0.5,4.0,1.0,0.0,0.06,2.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,no
14.0,2.0,1.0,2.0,33.0,147.16,0.13,8.0,18.4,1177.29,0.05,65.4,11.0,1.0,0.0,0.0,11.0,11.0,17.0,16.0,3.0,no
29.0,4.0,1.0,4.0,47.0,206.44,0.14,7.27,28.39,1501.37,0.07,83.41,19.0,6.0,2.0,0.0,10.0,11.0,31.0,16.0,5.0,yes
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
8.0,1.0,1.0,1.0,10.0,30.0,0.3,3.33,9.0,100.0,0.01,5.56,4.0,0.0,1.0,0.0,5.0,3.0,6.0,4.0,1.0,no
46.0,3.0,1.0,2.0,79.0,387.64,0.1,10.42,37.2,4039.66,0.13,224.43,24.0,12.0,7.0,0.0,11.0,13.0,47.0,29.0,5.0,yes
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
12.0,2.0,1.0,2.0,18.0,64.53,0.17,6.0,10.75,387.18,0.02,21.51,8.0,0.0,1.0,0.0,8.0,4.0,12.0,6.0,3.0,no
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
2.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,0.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
38.0,9.0,5.0,5.0,98.0,490.0,0.07,13.68,35.81,6705.26,0.16,372.51,34.0,1.0,1.0,0.0,13.0,19.0,58.0,40.0,17.0,yes
28.0,2.0,1.0,2.0,130.0,677.23,0.1,10.15,66.7,6876.48,0.23,382.03,21.0,1.0,3.0,0.0,11.0,26.0,82.0,48.0,3.0,no
33.0,4.0,3.0,4.0,84.0,408.07,0.11,8.86,46.05,3615.96,0.14,200.89,24.0,3.0,3.0,1.0,11.0,18.0,55.0,29.0,7.0,no
16.0,4.0,3.0,2.0,51.0,247.76,0.11,8.94,27.72,2214.33,0.08,123.02,13.0,0.0,0.0,1.0,13.0,16.0,29.0,22.0,7.0,no
11.0,3.0,1.0,2.0,34.0,151.62,0.14,7.2,21.06,1091.67,0.05,60.65,9.0,0.0,0.0,0.0,12.0,10.0,22.0,12.0,5.0,no
1.1,1.4,1.4,1.4,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,2.0,2.0,2.0,2.0,1.2,1.2,1.2,1.2,1.4,no
39.0,4.0,3.0,3.0,75.0,371.56,0.08,13.13,28.31,4876.79,0.12,270.93,30.0,2.0,5.0,0.0,15.0,16.0,47.0,28.0,7.0,no
107.0,9.0,4.0,7.0,317.0,1916.07,0.04,27.83,68.86,53316.81,0.64,2962.05,84.0,0.0,19.0,1.0,20.0,46.0,189.0,128.0,17.0,no
23.0,3.0,1.0,2.0,40.0,183.4,0.15,6.77,27.09,1241.47,0.06,68.97,11.0,6.0,4.0,0.0,11.0,13.0,24.0,16.0,5.0,yes
29.0,1.0,1.0,1.0,73.0,354.63,0.11,9.17,38.69,3250.8,0.12,180.6,20.0,0.0,7.0,0.0,11.0,18.0,43.0,30.0,1.0,no
8.0,1.0,1.0,1.0,10.0,30.0,0.3,3.33,9.0,100.0,0.01,5.56,4.0,0.0,1.0,0.0,5.0,3.0,6.0,4.0,1.0,no
28.0,2.0,1.0,2.0,59.0,263.11,0.1,10.0,26.31,2631.06,0.09,146.17,18.0,0.0,6.0,0.0,10.0,12.0,35.0,24.0,3.0,no
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
8.0,1.0,1.0,1.0,13.0,41.21,0.67,1.5,27.47,61.81,0.01,3.43,4.0,0.0,1.0,0.0,3.0,6.0,7.0,6.0,1.0,no
4.0,2.0,1.0,1.0,11.0,36.54,0.4,2.5,14.62,91.35,0.01,5.08,2.0,0.0,0.0,0.0,5.0,5.0,6.0,5.0,3.0,no
7.0,2.0,1.0,2.0,10.0,30.0,0.22,4.5,6.67,135.0,0.01,7.5,5.0,0.0,0.0,0.0,6.0,2.0,7.0,3.0,3.0,no
44.0,9.0,4.0,4.0,137.0,713.7,0.07,14.4,49.56,10277.21,0.24,570.96,29.0,4.0,8.0,1.0,12.0,25.0,77.0,60.0,17.0,no
109.0,8.0,1.0,8.0,296.0,1596.13,0.03,28.75,55.52,45888.62,0.53,2549.37,89.0,2.0,16.0,0.0,14.0,28.0,181.0,115.0,15.0,no
60.0,5.0,1.0,5.0,115.0,594.54,0.08,13.28,44.76,7897.06,0.2,438.73,44.0,3.0,9.0,0.0,13.0,23.0,68.0,47.0,9.0,yes
4.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
60.0,7.0,4.0,6.0,173.0,986.18,0.04,23.83,41.38,23503.86,0.33,1305.77,54.0,1.0,3.0,0.0,22.0,30.0,108.0,65.0,13.0,no
6.0,1.0,1.0,1.0,15.0,49.83,0.43,2.33,21.36,116.27,0.02,6.46,4.0,0.0,0.0,0.0,4.0,6.0,8.0,7.0,1.0,no
20.0,3.0,1.0,2.0,46.0,208.08,0.13,7.79,26.71,1621.32,0.07,90.07,15.0,0.0,3.0,0.0,11.0,12.0,29.0,17.0,5.0,no
6.0,1.0,1.0,1.0,11.0,34.87,0.29,3.5,9.96,122.04,0.01,6.78,4.0,0.0,0.0,0.0,7.0,2.0,9.0,2.0,1.0,no
10.0,2.0,1.0,2.0,18.0,64.53,0.14,7.0,9.22,451.71,0.02,25.09,8.0,0.0,0.0,0.0,8.0,4.0,11.0,7.0,3.0,no
10.0,2.0,1.0,2.0,18.0,64.53,0.14,7.0,9.22,451.71,0.02,25.09,8.0,0.0,0.0,0.0,8.0,4.0,11.0,7.0,3.0,no
105.0,16.0,14.0,11.0,294.0,1743.64,0.03,31.5,55.35,54924.56,0.58,3051.36,87.0,3.0,12.0,1.0,21.0,40.0,174.0,120.0,31.0,yes
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
8.0,1.0,1.0,1.0,10.0,31.7,0.5,2.0,15.85,63.4,0.01,3.52,3.0,0.0,0.0,1.0,4.0,5.0,5.0,5.0,1.0,no
6.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,3.0,0.0,1.0,0.0,3.0,2.0,3.0,2.0,1.0,no
7.0,1.0,1.0,1.0,10.0,30.0,0.3,3.33,9.0,100.0,0.01,5.56,4.0,0.0,0.0,0.0,5.0,3.0,6.0,4.0,1.0,no
5.0,1.0,1.0,1.0,5.0,11.61,0.67,1.5,7.74,17.41,0.0,0.97,2.0,0.0,0.0,0.0,3.0,2.0,3.0,2.0,1.0,no
30.0,5.0,1.0,4.0,58.0,278.83,0.13,7.88,35.41,2195.76,0.09,121.99,23.0,0.0,5.0,0.0,12.0,16.0,37.0,21.0,9.0,no
4.0,1.0,1.0,1.0,4.0,8.0,0.67,1.5,5.33,12.0,0.0,0.67,2.0,0.0,0.0,0.0,3.0,1.0,3.0,1.0,1.0,no
55.0,12.0,9.0,9.0,187.0,1001.86,0.07,13.57,73.85,13591.93,0.33,755.11,45.0,3.0,5.0,0.0,11.0,30.0,113.0,74.0,23.0,yes
14.0,3.0,1.0,2.0,49.0,211.77,0.12,8.5,24.91,1800.08,0.07,100.0,10.0,0.0,1.0,1.0,10.0,10.0,32.0,17.0,5.0,no
43.0,3.0,1.0,3.0,72.0,346.13,0.06,16.67,20.77,5768.83,0.12,320.49,29.0,4.0,6.0,0.0,16.0,12.0,47.0,25.0,5.0,no
61.0,7.0,1.0,4.0,166.0,916.91,0.06,16.19,56.64,14842.5,0.31,824.58,49.0,1.0,9.0,0.0,14.0,32.0,92.0,74.0,13.0,yes
% 
% 
% 